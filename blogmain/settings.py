"""
Django settings for blogmain project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8ii3q!(trw!@4ol#jwdq!uos=lu)^+x^5e72(4s*cnc5+p(2t7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'blogs.apps.BlogConfig',
    'assignment',
    'crispy_forms',
    'dashboards',
    'pages',
    'crispy_bootstrap4',
    'django_ckeditor_5',
    'accounts.apps.AccountsConfig',
    'taggit',
    'django.contrib.sitemaps',
    'pipeline',
    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Providers (Google and Facebook)
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # ✅ CSRF Middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # ✅ Required
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
   
]

ROOT_URLCONF = 'blogmain.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR /'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blogs.context_processors.get_categories',
                'blogs.context_processors.get_social_links',  # ✅ Correct name
                'django.template.context_processors.request',
                'blogs.context_processors.site_settings',
                
                
                

            ],
        },
    },
]

WSGI_APPLICATION = 'blogmain.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# settings.py

STATIC_URL = '/static/'

STATICFILES_STORAGE = 'pipeline.storage.PipelineManifestStorage'
PIPELINE = {
    'CSS_COMPRESSOR': 'pipeline.compressors.cssmin.CSSMinCompressor',
    'JS_COMPRESSOR': 'pipeline.compressors.jsmin.JSMinCompressor',
}

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
]

PIPELINE['STYLESHEETS'] = {
    'main': {
        'source_filenames': (
                'css/base.css',
                'css/dashboard.css',    # base styles first
                'css/home.css',    # page layout
                'css/blog.css',    # blog specific
                'css/page.css',
                'css/tagged_posts.css',
                'css/pagess.css',
                
        ),
        'output_filename': 'css/main.min.css',
    },
}

PIPELINE['JAVASCRIPT'] = {
    'main': {
        'source_filenames': (
                'js/base.js',    # base styles first
                'js/blog.js',    # blog specific,
                'js/home.js',
        ),
        'output_filename': 'js/main.min.js',
    },
}



# Include multiple static directories (one per app)
STATICFILES_DIRS = [
    BASE_DIR / 'blogmain' / 'static',
]

 # Optional — for collectstatic in production
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR /'media'
CRISPY_TEMPLATE_PACK = 'Bootstrap4'

SITE_ID = 2

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default
    'allauth.account.auth_backends.AuthenticationBackend',  # allauth
)

LOGIN_URL = 'account_login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


ACCOUNT_LOGOUT_REDIRECT_URL = "/"
ACCOUNT_SIGNUP_REDIRECT_URL = "/"

# Optional: Improve signup behavior
ACCOUNT_LOGIN_METHODS = {'email'}  # You can also use {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']  # Asterisk * marks required fields


# Allow users to log in with social accounts without extra signup
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True

# Prevent duplicate email registrations
ACCOUNT_UNIQUE_EMAIL = True

# Automatically link social account if email matches existing user
#ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'
#SOCIALACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
# settings.py

SOCIALACCOUNT_ADAPTER = "accounts.adapters.MySocialAccountAdapter"



# Optional - Turn off email verification (only if you trust Google/Facebook)
ACCOUNT_EMAIL_VERIFICATION = 'none'



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'bidemia02@gmail.com'
EMAIL_HOST_PASSWORD = 'baci akdd twoo yqmr'

ACCOUNT_FORMS = {
    'signup': 'accounts.forms.CustomSignupForm',
    'login': 'accounts.forms.CustomLoginForm',  # if you use a custom form
}

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}





customColorPalette = [
        {
            'color': 'hsl(4, 90%, 58%)',
            'label': 'Red'
        },
        {
            'color': 'hsl(340, 82%, 52%)',
            'label': 'Pink'
        },
        {
            'color': 'hsl(291, 64%, 42%)',
            'label': 'Purple'
        },
        {
            'color': 'hsl(262, 52%, 47%)',
            'label': 'Deep Purple'
        },
        {
            'color': 'hsl(231, 48%, 48%)',
            'label': 'Indigo'
        },
        {
            'color': 'hsl(207, 90%, 54%)',
            'label': 'Blue'
        },
    ]

CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": [
            "heading",
            "|",
            "bold",
            "italic",
            "link",
            "underline", 
            "strikethrough",
            "code",
            "subscript", 
            "superscript", 
            "highlight", 
            "|", 
            "codeBlock", 
            "sourceEditing", 
            "insertImage",
            "bulletedList",
            "numberedList",
            "blockQuote",
            "imageUpload",
            "|",
            "fontSize", 
            "fontFamily", 
            "fontColor", 
            "fontBackgroundColor", 
            "mediaEmbed", 
            "removeFormat",
            "insertTable",
            "undo",
            "redo",
        ],
        'image': {
            'toolbar': ['imageTextAlternative', 'imageStyle:full', 'imageStyle:side']
        },
        "heading": {
            "options": [
                {"model": "paragraph", "title": "Paragraph", "class": "ck-heading_paragraph"},
                {"model": "heading1", "view": "h1", "title": "Heading 1", "class": "ck-heading_heading1"},
                {"model": "heading2", "view": "h2", "title": "Heading 2", "class": "ck-heading_heading2"},
            ]
        },
    }
}

